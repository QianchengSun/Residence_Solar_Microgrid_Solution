## This is the function package for obtain a .csv file through API address
# Author : Qiancheng Sun
# Load packages 

import requests # use requests to obtain the information from URL
import pandas as pd
import os 
import json
import numpy as np
# function for access the PV watts API
def solar_PV_watts_API(api_key, 
    solar_api_url, 
    data_format, 
    latitude,
    longitude,
    system_capacity, 
    module_type,
    losses,
    array_type,
    tilt,
    azimuth,
    timeframe,
    output_dir):

    """
    This is the function that obtain the dataset as .json file from PVwatts website.
    All the input arguments for applying this function must be "STRING",
    More information, please view the description of single input arguments description.

    Notification:
    
    Please enter your own personal token to access the API
    Weblink for obtain API Key :
    https://developer.nrel.gov/docs/solar/nsrdb/himawari-download/

    Reference information for PV watts API :
    https://developer.nrel.gov/docs/solar/pvwatts/v6/


    Input Arguments:
    
        api_key : string (character)
                Required input argument

                Please enter your own API key to access the API website

        solar_api_url : string (character)
                Required input argument

                Please enter the API web link which is developer page in any website
                Example : 
                https://developer.nrel.gov/api/pvwatts/v6
        
        data_format : string (character)
                Required input argument

                Here is the data format that will be generated by using API access.
                Option: 
                .json : .json represent for JavaScript Object Notation, which can be read as .txt file
                .xml : .xml represent for eXtensible Markup Language
        
        latitude : string (character) ---- decimal
                Required input argument

                The latitude for the location to use. The range of the latitude is [-90, 90].    

        longitude : string (character) ---- decimal 
                Required input argument

                The longitude for the location to use. The range of longitude is [-180, 180].

        system_capacity:  string (character) ---- decimal
                Required input argument

                Nameplate capacity (KW). The range of system_capacity is [0.05, 500000]

        module_type : string (character) ---- integer
                Required input argument

                Module type. 
                Options: 0, 1, 2
                0 : Standard
                1 : Premium
                2 : Thin film

        losses : string (character) ---- decimal
                Required input argument

                System losses (precent). The range of system losses is [-5 , 99]

        array_type : string (character) ---- integer
                Required input argument

                Array type. 
                Options : 0,1,2,3,4
                0 : Fixed - Open Rack
                1 : Fixed - Roof Mounted
                2 : 1 - Axis
                3 : 1 - Axis Backtracking
                4 : 2 - Axis
        
        tilt : string (character) ---- decimal
                Required input argument

                Tilt angle (degrees). The range of tilt ange is [0, 90].
                
        azimuth : string (character) ---- decimal
                Required input argument

                Azimuth angle (degrees). The range of the azimuth angle is [0, 360)

        timeframe : string (character) 
                Optional input arguments

                It will have effect for the data output, the default is monthly
                Options : monthly, hourly
                monthly : will obtain the monthly data
                hourly : will obtain the hourly data

        output_dir : string (character)
                The working directory for the API data that you are willing to save.
        
        save_file_switch : Boolean 
                Default is True.
                When the value is True that means will save the solar data into the output_dir

    Output :
        A .json file with the solar PV data
    """
    api_key = api_key
    # url for obtain PV watts dataset
    pv_watts_url = solar_api_url
    # data format
    # represent for the data format that you want to download
    # Options : .json, .xml
    data_format = data_format

    # location latitude
    lat = latitude # type = decimal, range = (-90, 90)

    # location longitude 
    lon = longitude # type = decimal, range = (-180, 180)

    # system capacity, Nameplates capacity(kW)
    system_capacity = system_capacity # type = decimal, range = (0.05, 500000)

    # module type 
    # module type for PV 
    # Options : 0 for Standard. 1 for Premium. 2 for Thin film
    module_type = module_type # Here step up the modu;e type is Standard

    # System loss (precent)
    losses = losses # data type = decimal, range = (-5, 99)

    # array_type 
    array_type = array_type # data type = integer
    # option:
    # 0, Fixed - Open Rack
    # 1, Fixed - Roof Mounted
    # 2, 1 - Axis 
    # 3, 1 - Axis Backtracking
    # 4, 2 - Axis

    # tilt angle degrees
    tilt = tilt # data type = decimal, range = [0, 90]

    # azimuth angle
    azimuth = azimuth # data type = decimal, range = (0,360)
    # time frame 
    timeframe = timeframe
    url = pv_watts_url + data_format + "?" +\
        "api_key=" + api_key + "&"\
            + "lat=" + lat + "&" \
                + "lon=" + lon + "&" \
                    + "losses=" + losses + "&" \
                        + "system_capacity=" + system_capacity + "&"\
                            + "module_type=" + module_type + "&" \
                                + "array_type=" + array_type + "&" \
                                    + "tilt=" + tilt + "&" \
                                        + "azimuth=" + azimuth + "&" \
                                            + "timeframe=" + timeframe
    response = requests.get(url) # requests.get() is the function that obtain the data through API
    data = response.text
    if not os.path.exists(output_dir):
        os.mkdir(output_dir)
    # turn the json format 
    solar_data = json.loads(data)

    return solar_data
#  Read Json file into numpy array and download the data
# function to extract element from Json file
# Obtain the information from Json file
def extract_element_from_json(obj, path):
    def extract(obj, path, ind, arr):
        key = path[ind]
        if ind + 1 < len(path):
            if isinstance(obj, dict):
                if key in obj.keys():
                    extract(obj.get(key), path, ind + 1 , arr)
                else:
                    arr.append(None)
            elif isinstance(obj, list):
                if not obj:
                    arr.append(None)
                else: 
                    for item in obj:
                        extract(item, path, ind, arr)
            else:
                arr.append(None)
        if ind + 1 == len(path):
            if isinstance(obj, list):
                if not obj:
                    arr.append(None)
                else:
                    for item in obj:
                        arr.append(item.get(key, None))
            elif isinstance(obj, dict):
                arr.append(obj.get(key, None))
            else:
                arr.append(None)
        return arr
    if isinstance(obj, dict):
        return extract(obj, path, 0 ,[])
    elif isinstance(obj, list):
        outer_arr = []
        for item in obj:
            outer_arr.append(extract(item, path, 0, []))
        return outer_arr

# obtain the values from the Json file
def solar_data_from_json(input_data, output_dir, time_switch = True):
    """
    The function is developed to obtain the information from the .json file.

    Input arguments:
        input_data : .json file
            the input_data will be the result which obtained by solar_PV_watts_API() function
    
        output_dir : string (character)
            the output working directory that will be saved the file.
        
        time_switch : Boolean, default is True
            When the default is True, it will return the monthly data
            If the time_switch is False, it will return the hourly data
    """
    input_data = input_data

    if time_switch :
        # the outputs for all the data from API
        outputs = extract_element_from_json(input_data, ["outputs"]) 
        # obtain the ac_monthly information from .json file
        """
        Monthly AC system output (kWhac)
        The array of values represents the value for each month, with the first element being for January and the last element being for December.
        "Monthly AC System Output (kWh)"
        """
        ac_monthly = extract_element_from_json(outputs, ["ac_monthly"])[0][0] 
        # turn the list value into np.array()
        ac_monthly = np.array(ac_monthly)
        # obtain the poa_monthly information from .json file
        """
        Monthly plane of array irradiance values (kWh/m^2)
        The array of values represents the value for each month, with the first element being for January and the element being for December.
        Monthly Plane of Array Irradiance (W/m2)
        """
        poa_monthly = extract_element_from_json(outputs, ["poa_monthly"])[0][0] 
        # turn the list value into np.array()
        poa_monthly = np.array(poa_monthly)
        # obtain the solrad_monthly information from .json file
        """
        Monthly solar radiation values (kWh/m^2/day)
        The array of values represents the value for each month, with the first element being for January and the last element being for December.
        Monthly Solar Radiation (kWh/m2/day)
        """
        solrad_monthly = extract_element_from_json(outputs, ["solrad_monthly"])[0][0] 
        # turn the list value into np.array()
        solrad_monthly = np.array(solrad_monthly)
        # obtain the dc_monthly information from json file
        """
        Monthly DC array output (kWhdc)
        The array of values represents the value for each month, with the first element being for January and the last element being for December.
        Monthly DC array Output (kWh)
        """
        dc_monthly = extract_element_from_json(outputs, ["dc_monthly"])[0][0] 
        # turn the list value into np.array()
        dc_monthly = np.array(dc_monthly)

        # save array into data frame
        df_solar = pd.DataFrame({"Monthly AC System Output (kWh)": ac_monthly,
                                "Monthly Plane of Array Irradiance (W/m2)": poa_monthly,
                                "Monthly Solar Radiation (kWh/m2/day)": solrad_monthly,
                                "Monthly DC array Output (kWh)": dc_monthly})
        if not os.path.exists(output_dir):
            os.mkdir(output_dir)
        # save the df_solar file into local working directory
        df_solar.to_csv(os.path.join(output_dir, "Montly_solar_PV_watts.csv"))
    else:
        # the outputs for all the data from API
        outputs = extract_element_from_json(input_data, ["outputs"]) 

        # obtain the hourly AC system output (Wac)
        """
        Hourly AC system output (only when timeframe = hourly) (Wac)
        Hourly AC System Output (W)
        """
        ac = extract_element_from_json(outputs, ["ac"])[0][0]
        # turn the list value into np.array()
        ac = np.array(ac)
        # obtain the hourly plane of array irradiance
        """
        Hourly plane of array irradiance (only when timeframe=hourly). (W/m2)
        Hourly Plane of Array Irradiance (W/m2)
        """
        poa = extract_element_from_json(outputs, ["poa"])[0][0]
        # turn the value into np.array()
        poa = np.array(poa)
        # obtain the hourly beam normal irradiance
        """
        Hourly beam normal irradiance (only when timeframe=hourly). (W/m2)
        Hourly Beam irradiance (W/m^2)
        """
        dn = extract_element_from_json(outputs, ["dn"])[0][0]
        # turn the list value into np.array()
        dn = np.array(dn)
        # obtain the hourly DC array output
        """
        Hourly DC array output (only when timeframe=hourly). (Wdc)
        Hourly DC Array output (Wdc)
        """
        dc = extract_element_from_json(outputs, ["dc"])[0][0]
        # turn the list value into np.array()
        dc = np.array(dc)
        # obtain the hourly diffuse irradiance 
        """
        Hourly diffuse irradiance (only when timeframe=hourly). (W/m2)
        Hourly Diffuse Irradiance (W/m2)
        """
        df = extract_element_from_json(outputs, ["df"])[0][0]
        # turn the list value into np.array()
        df = np.array(df)
        # obtain the hourly ambient temeprature
        """
        Hourly ambient temperature (only when timeframe=hourly). (C)
        Hourly Ambient Temperature (C)
        """
        tamb = extract_element_from_json(outputs, ["tamb"])[0][0]
        # turn the list into np.array()
        tamb = np.array(tamb)
        # obtain hourly module temperature
        """
        Hourly module temperature (only when timeframe=hourly) (C)
        Hourly Cell Temperature (C)
        """
        tcell = extract_element_from_json(outputs, ["tcell"])[0][0]
        # turn the list value into np.array()
        tcell = np.array(tcell)
        # obtain the wind speed data
        """
        Hourly windspeed (only when timeframe=hourly). (m/s)
        Hourly Wind Speed (m/s)
        """
        wspd = extract_element_from_json(outputs, ["wspd"])[0][0]
        # turn the list into np.array() 
        wspd = np.array(wspd)

        # save array into data frame
        df_solar = pd.DataFrame({"Hourly AC System Output (W)": ac,
                                "Hourly Plane of Array Irradiance (W/m2)": poa,
                                "Hourly Beam irradiance (W/m^2)": dn,
                                "Hourly Diffuse Irradiance (W/m2)": df,
                                "Hourly Ambient Temperature (C)": tamb,
                                "Hourly DC Array output (Wdc)": dc,
                                "Hourly Cell Temperature (C)": tcell,
                                "Hourly Wind Speed (m/s)": wspd})
        if not os.path.exists(output_dir):
            os.mkdir(output_dir)
        # save the df_solar file into local working directory
        df_solar.to_csv(os.path.join(output_dir, "Montly_solar_PV_watts.csv"))
    """
    Use this function will return a data frame
    """
    return df_solar

# %%
